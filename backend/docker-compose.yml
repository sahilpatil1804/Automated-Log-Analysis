version: '3.9'

x-producer-base: &producer-base
  image: logstream-producer:latest
  build:
    context: .
    dockerfile: Dockerfile.producer
  depends_on:
    kafka:
      condition: service_healthy
  volumes:
    - ./dataset:/app/dataset:ro
  restart: unless-stopped

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    ports:
      - "9092:9092"

  # ⬇️ Individual producers, reusing the same image

  producer-cybersecurity:
    <<: *producer-base
    command: ["python", "producer_cybersecurity.py"]
    environment:
      BATCH_SIZE: "50"
      START_AT_LINE: "0"

  producer-netflow:
    <<: *producer-base
    command: ["python", "producer_netflow.py"]
    environment:
      BATCH_SIZE: "75"
      START_AT_LINE: "0"

  producer-device:
    <<: *producer-base
    command: ["python", "producer_device.py"]
    environment:
      BATCH_SIZE: "60"
      START_AT_LINE: "0"

  producer-hostevent:
    <<: *producer-base
    command: ["python", "producer_hostevent.py"]
    environment:
      BATCH_SIZE: "80"
      START_AT_LINE: "0"

  producer-http:
    <<: *producer-base
    command: ["python", "producer_http.py"]
    environment:
      BATCH_SIZE: "100"
      START_AT_LINE: "0"

  producer-logon:
    <<: *producer-base
    command: ["python", "producer_logon.py"]
    environment:
      BATCH_SIZE: "40"
      START_AT_LINE: "0"

  producer-webserver:
    <<: *producer-base
    command: ["python", "producer_webserver.py"]
    environment:
      BATCH_SIZE: "120"
      START_AT_LINE: "0"

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: log-consumer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP: "kafka:29092"
    restart: unless-stopped

networks:
  default:
    name: kafka-log-streaming-net
